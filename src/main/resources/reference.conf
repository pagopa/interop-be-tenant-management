akka {
  stdout-loglevel = "OFF"
  loglevel = "DEBUG"
  use-slf4j = on
  coordinated-shutdown.run-by-actor-system-terminate = on
  coordinated-shutdown.exit-jvm = on

  actor {
    provider = cluster
    warn-about-java-serializer-usage = on
    allow-java-serialization = on

    serializers {
      tenant-updated = "it.pagopa.interop.tenantmanagement.model.persistence.serializer.TenantUpdatedSerializer"
      tenant-created = "it.pagopa.interop.tenantmanagement.model.persistence.serializer.TenantCreatedSerializer"
      selfcare-mapping-created = "it.pagopa.interop.tenantmanagement.model.persistence.serializer.SelfcareMappingCreatedSerializer"
      state = "it.pagopa.interop.tenantmanagement.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.interop.tenantmanagement.model.persistence.serializer.TenantCreatedSerializer" = 100000
      "it.pagopa.interop.tenantmanagement.model.persistence.serializer.TenantUpdatedSerializer" = 100001
      "it.pagopa.interop.tenantmanagement.model.persistence.serializer.SelfcareMappingCreatedSerializer" = 100002
      "it.pagopa.interop.tenantmanagement.model.persistence.serializer.StateSerializer" = 200000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.interop.tenantmanagement.model.persistence.TenantUpdated" = tenant-updated
      "it.pagopa.interop.tenantmanagement.model.persistence.TenantCreated" = tenant-created
      "it.pagopa.interop.tenantmanagement.model.persistence.State" = state
      "it.pagopa.interop.tenantmanagement.model.persistence.SelfcareMappingCreated" = selfcare-mapping-created
    }
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding.number-of-shards = 60 //number of nodes * 10
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed.stash-capacity = 200000

  projection {
    enabled = false
    enabled = ${?ENABLED_PROJECTIONS}
  }

  management {
    http {
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    cluster.bootstrap.contact-point-discovery {
      discovery-method = kubernetes-api
      required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
    }
    health-checks {
      readiness-checks.ready = "it.pagopa.interop.tenantmanagement.server.impl.HealthCheck"
      liveness-checks.live = "it.pagopa.interop.tenantmanagement.server.impl.LiveCheck"
    }
  }
}
